import datetime
import random

from sqlalchemy import select
from db import new_session
from db.events import EventActivityOrm, EventOrm, EventParticipationOrm, ParticipantTypeEnum, ParticipationMemberOrm, \
    ScoreOrm
from db.users import UserOrm, RoleEnum
from auth.security import get_password_hash

INITIAL_USERS = {
    "admin": {
        "handle": "1",
        "email": "admin@sirius.com",
        "password": "123456789",
        "full_name": "–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        "phone": "+70000000001",
        "role": RoleEnum.admin,
    },
    "organizer": {
        "handle": "2",
        "email": "organizer@sirius.com",
        "password": "123456789",
        "full_name": "–ì–ª–∞–≤–Ω—ã–π –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä",
        "phone": "+70000000002",
        "role": RoleEnum.organizer,
    },
    **{f"player{i}": {
        "handle": f"10{i}",
        "email": f"player{i}@test.com",
        "password": "password",
        "full_name": f"–ò–≥—Ä–æ–∫ {i}",
        "avatar_url": f"https://i.pravatar.cc/150?u=player{i}",
        "phone": f"+711122233{i:02d}"} for i in range(20)
    }
}


async def create_initial_users():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç –≤ –ë–î."""
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    async with new_session() as session:
        for key, user_data in INITIAL_USERS.items():
            user_exists = await session.execute(
                select(UserOrm).where(UserOrm.handle == user_data["handle"])
            )
            if not user_exists.scalar_one_or_none():
                print(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {key}")
                password = user_data.pop("password")
                user_data["hashed_password"] = get_password_hash(password)

                user_data.setdefault("birthday", datetime.date.fromisoformat("2000-01-01"))
                user_data.setdefault("gender", "male")

                new_user = UserOrm(**user_data)
                session.add(new_user)
        await session.commit()
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


INITIAL_EVENTS = [
    {
        "title": "–õ–µ—Ç–Ω–∏–π –º–∞—Ä–∞—Ñ–æ–Ω –∫–æ–¥–∞",
        "description": "–ï–∂–µ–≥–æ–¥–Ω—ã–π –º–∞—Ä–∞—Ñ–æ–Ω –¥–ª—è –ª—É—á—à–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤. 24 —á–∞—Å–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –∫–æ–¥–∏–Ω–≥–∞, –ø–∏—Ü—Ü–∞ –∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏!",
        "date": datetime.date.today() + datetime.timedelta(days=30),  # –ë—É–¥—É—â–µ–µ
        "start_time": datetime.time(12, 0),
        "end_time": datetime.time(12, 0),  # –ù–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å, –Ω–æ –¥–∞—Ç–∞ –æ–¥–Ω–∞
        "is_team": False,
        "max_members": 100,
        "max_teams": None,
        "activities": [
            {"name": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ä—á–∞", "icon": "üëï", "start_dt": datetime.datetime(2025, 8, 15, 12, 0),
             "end_dt": datetime.datetime(2025, 8, 15, 13, 0)},
            {"name": "–ù–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ—Å—Ç–∞", "icon": "üíª", "start_dt": datetime.datetime(2025, 8, 15, 13, 0),
             "end_dt": datetime.datetime(2025, 8, 16, 13, 0)},
            {"name": "–ù–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π", "icon": "üèÜ", "start_dt": datetime.datetime(2025, 8, 16, 14, 0),
             "end_dt": datetime.datetime(2025, 8, 16, 15, 0)},
        ]
    },
    {
        "title": "–ß–µ–º–ø–∏–æ–Ω–∞—Ç –ø–æ —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–µ",
        "description": "–°–æ–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ–≥–æ —Ä–æ–±–æ—Ç–∞ –∏ —Å—Ä–∞–∑–∏—Ç–µ—Å—å –Ω–∞ –∞—Ä–µ–Ω–µ. –ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑ - —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞ –≤ –≤–µ–¥—É—â–µ–π IT-–∫–æ–º–ø–∞–Ω–∏–∏.",
        "date": datetime.date.today(),  # –¢–µ–∫—É—â–µ–µ
        "start_time": datetime.time(9, 0),
        "end_time": datetime.time(18, 0),
        "is_team": True,
        "max_members": 20,
        "max_teams": 5,
        "activities": [
            {"name": "–°–±–æ—Ä–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–±–æ—Ç–æ–≤", "icon": "üõ†Ô∏è", "is_scoreable": True, "max_score": 50},
            {"name": "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–µ–∑–¥—ã", "icon": "‚è±Ô∏è", "is_scoreable": True, "is_versus": True,
             "max_score": 100},
            {"name": "–§–∏–Ω–∞–ª—å–Ω–∞—è –±–∏—Ç–≤–∞ —Ä–æ–±–æ—Ç–æ–≤", "icon": "ü§ñ", "is_scoreable": True, "is_versus": True, "max_score": 200},
        ]
    },
    {
        "title": "–•–∞–∫–∞—Ç–æ–Ω '–£–º–Ω—ã–π –ì–æ—Ä–æ–¥'",
        "description": "–†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—Ä–µ–¥—ã –∑–∞ 48 —á–∞—Å–æ–≤. –õ—É—á—à–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –±—É–¥—É—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥–∞.",
        "date": datetime.date.today() - datetime.timedelta(days=60),  # –ü—Ä–æ—à–µ–¥—à–µ–µ
        "start_time": datetime.time(18, 0),
        "end_time": datetime.time(18, 0),
        "is_team": True,
        "max_members": 30,
        "max_teams": 6,
        "activities": []
    }
]


async def create_initial_events():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç."""
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π...")
    async with new_session() as session:
        for event_data in INITIAL_EVENTS:
            event_exists = await session.execute(
                select(EventOrm).where(EventOrm.title == event_data["title"])
            )
            if not event_exists.scalar_one_or_none():
                print(f"–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {event_data['title']}")
                activities_data = event_data.pop("activities", [])

                new_event = EventOrm(**event_data)

                # –°–æ–∑–¥–∞–µ–º –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫ —Å–æ–±—ã—Ç–∏—é
                new_event.activities = [
                    EventActivityOrm(**activity) for activity in activities_data
                ]

                session.add(new_event)
        await session.commit()
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


async def create_leaderboard_data():
    """–°–æ–∑–¥–∞–µ—Ç –¥–≤–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏ –æ—á–∫–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞."""
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞...")
    async with new_session() as session:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–Ω–æ –ª–∏ —É–∂–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞, –∏ –≤—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –¥–∞
        res_check = await session.execute(
            select(EventOrm).where(EventOrm.title == "–ß–µ–º–ø–∏–æ–Ω–∞—Ç –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é"))
        if res_check.scalar_one_or_none():
            print("–î–∞–Ω–Ω—ã–µ –¥–ª—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")
            return

        print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞...")
        today = datetime.date.today()

        # 2. –°–æ–∑–¥–∞–µ–º 3 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        activities_data = [
            {"name": "–û—Ç–±–æ—Ä–æ—á–Ω—ã–π —Ç—É—Ä", "is_scoreable": True, "max_score": 100},
            {"name": "–ü–æ–ª—É—Ñ–∏–Ω–∞–ª", "is_scoreable": True, "max_score": 200},
            {"name": "–ì—Ä–∞–Ω–¥-—Ñ–∏–Ω–∞–ª", "is_scoreable": True, "max_score": 300},
        ]

        # 3. –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        team_event = EventOrm(
            title="–ß–µ–º–ø–∏–æ–Ω–∞—Ç –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é",
            date=today,
            is_team=True, max_members=50, max_teams=10,
            activities=[EventActivityOrm(**ad) for ad in activities_data]
        )
        session.add(team_event)

        # 4. –°–æ–∑–¥–∞–µ–º –ª–∏—á–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        solo_event = EventOrm(
            title="–û–¥–∏–Ω–æ—á–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä –ø–æ —Ä–µ—à–µ–Ω–∏—é –∑–∞–¥–∞—á",
            date=today,
            is_team=False, max_members=10,
            activities=[EventActivityOrm(**ad) for ad in activities_data]
        )
        session.add(solo_event)

        # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–±—ã—Ç–∏–π –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        await session.flush()

        # 5. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –Ω–∞—à–∏—Ö "–∏–≥—Ä–æ–∫–æ–≤"
        res_players = await session.execute(select(UserOrm).where(UserOrm.email.like("player%@test.com")))
        players = res_players.scalars().all()

        # 6. –°–æ–∑–¥–∞–µ–º 10 –∫–æ–º–∞–Ω–¥ –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –∏–º –æ—á–∫–∏
        for i in range(10):
            captain = players[i]
            member = players[i + 10]
            team_participation = EventParticipationOrm(
                event_id=team_event.id, creator_id=captain.id,
                participant_type=ParticipantTypeEnum.team, team_name=f"–ö–æ–º–∞–Ω–¥–∞ #{i + 1}"
            )
            team_participation.members.extend([
                ParticipationMemberOrm(user_id=captain.id),
                ParticipationMemberOrm(user_id=member.id)
            ])
            session.add(team_participation)
            await session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID —É—á–∞—Å—Ç–∏—è

            # –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∑–∞ –∫–∞–∂–¥—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            for activity in team_event.activities:
                score = ScoreOrm(
                    participation_id=team_participation.id, activity_id=activity.id,
                    score=random.randint(20, activity.max_score)
                )
                session.add(score)

        # 7. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º 10 –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –∏–º –æ—á–∫–∏
        for i in range(10):
            player = players[i]
            solo_participation = EventParticipationOrm(
                event_id=solo_event.id, creator_id=player.id,
                participant_type=ParticipantTypeEnum.individual
            )
            solo_participation.members.append(ParticipationMemberOrm(user_id=player.id))
            session.add(solo_participation)
            await session.flush()

            # –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∑–∞ –∫–∞–∂–¥—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            for activity in solo_event.activities:
                score = ScoreOrm(
                    participation_id=solo_participation.id, activity_id=activity.id,
                    score=random.randint(10, activity.max_score)
                )
                session.add(score)

        await session.commit()
    print("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

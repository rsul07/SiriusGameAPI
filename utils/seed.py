import datetime
from sqlalchemy import select
from db import new_session
from db.events import EventActivityOrm, EventOrm
from db.users import UserOrm, RoleEnum
from auth.security import get_password_hash

INITIAL_USERS = {
    "admin": {
        "handle": "1",
        "email": "admin@sirius.com",
        "password": "123456789",
        "full_name": "–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        "phone": "+70000000001",
        "role": RoleEnum.admin,
    },
    "organizer": {
        "handle": "2",
        "email": "organizer@sirius.com",
        "password": "123456789",
        "full_name": "–ì–ª–∞–≤–Ω—ã–π –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä",
        "phone": "+70000000002",
        "role": RoleEnum.organizer,
    }
}


async def create_initial_users():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç –≤ –ë–î."""
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    async with new_session() as session:
        for key, user_data in INITIAL_USERS.items():
            user_exists = await session.execute(
                select(UserOrm).where(UserOrm.handle == user_data["handle"])
            )
            if not user_exists.scalar_one_or_none():
                print(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {key}")
                password = user_data.pop("password")
                user_data["hashed_password"] = get_password_hash(password)

                user_data.setdefault("birthday", datetime.date.fromisoformat("2000-01-01"))
                user_data.setdefault("gender", "male")

                new_user = UserOrm(**user_data)
                session.add(new_user)
        await session.commit()
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


INITIAL_EVENTS = [
    {
        "title": "–õ–µ—Ç–Ω–∏–π –º–∞—Ä–∞—Ñ–æ–Ω –∫–æ–¥–∞",
        "description": "–ï–∂–µ–≥–æ–¥–Ω—ã–π –º–∞—Ä–∞—Ñ–æ–Ω –¥–ª—è –ª—É—á—à–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤. 24 —á–∞—Å–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –∫–æ–¥–∏–Ω–≥–∞, –ø–∏—Ü—Ü–∞ –∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏!",
        "date": datetime.date.today() + datetime.timedelta(days=30),  # –ë—É–¥—É—â–µ–µ
        "start_time": datetime.time(12, 0),
        "end_time": datetime.time(12, 0),  # –ù–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å, –Ω–æ –¥–∞—Ç–∞ –æ–¥–Ω–∞
        "is_team": False,
        "max_members": 100,
        "max_teams": None,
        "activities": [
            {"name": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ä—á–∞", "icon": "üëï", "start_dt": datetime.datetime(2025, 8, 15, 12, 0),
             "end_dt": datetime.datetime(2025, 8, 15, 13, 0)},
            {"name": "–ù–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ—Å—Ç–∞", "icon": "üíª", "start_dt": datetime.datetime(2025, 8, 15, 13, 0),
             "end_dt": datetime.datetime(2025, 8, 16, 13, 0)},
            {"name": "–ù–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π", "icon": "üèÜ", "start_dt": datetime.datetime(2025, 8, 16, 14, 0),
             "end_dt": datetime.datetime(2025, 8, 16, 15, 0)},
        ]
    },
    {
        "title": "–ß–µ–º–ø–∏–æ–Ω–∞—Ç –ø–æ —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–µ",
        "description": "–°–æ–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ–≥–æ —Ä–æ–±–æ—Ç–∞ –∏ —Å—Ä–∞–∑–∏—Ç–µ—Å—å –Ω–∞ –∞—Ä–µ–Ω–µ. –ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑ - —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞ –≤ –≤–µ–¥—É—â–µ–π IT-–∫–æ–º–ø–∞–Ω–∏–∏.",
        "date": datetime.date.today(),  # –¢–µ–∫—É—â–µ–µ
        "start_time": datetime.time(9, 0),
        "end_time": datetime.time(18, 0),
        "is_team": True,
        "max_members": 20,
        "max_teams": 5,
        "activities": [
            {"name": "–°–±–æ—Ä–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–±–æ—Ç–æ–≤", "icon": "üõ†Ô∏è", "is_scoreable": True, "max_score": 50},
            {"name": "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–µ–∑–¥—ã", "icon": "‚è±Ô∏è", "is_scoreable": True, "is_versus": True,
             "max_score": 100},
            {"name": "–§–∏–Ω–∞–ª—å–Ω–∞—è –±–∏—Ç–≤–∞ —Ä–æ–±–æ—Ç–æ–≤", "icon": "ü§ñ", "is_scoreable": True, "is_versus": True, "max_score": 200},
        ]
    },
    {
        "title": "–•–∞–∫–∞—Ç–æ–Ω '–£–º–Ω—ã–π –ì–æ—Ä–æ–¥'",
        "description": "–†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—Ä–µ–¥—ã –∑–∞ 48 —á–∞—Å–æ–≤. –õ—É—á—à–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –±—É–¥—É—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥–∞.",
        "date": datetime.date.today() - datetime.timedelta(days=60),  # –ü—Ä–æ—à–µ–¥—à–µ–µ
        "start_time": datetime.time(18, 0),
        "end_time": datetime.time(18, 0),
        "is_team": True,
        "max_members": 30,
        "max_teams": 6,
        "activities": []
    }
]


async def create_initial_events():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç."""
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π...")
    async with new_session() as session:
        for event_data in INITIAL_EVENTS:
            event_exists = await session.execute(
                select(EventOrm).where(EventOrm.title == event_data["title"])
            )
            if not event_exists.scalar_one_or_none():
                print(f"–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {event_data['title']}")
                activities_data = event_data.pop("activities", [])

                new_event = EventOrm(**event_data)

                # –°–æ–∑–¥–∞–µ–º –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫ —Å–æ–±—ã—Ç–∏—é
                new_event.activities = [
                    EventActivityOrm(**activity) for activity in activities_data
                ]

                session.add(new_event)
        await session.commit()
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
